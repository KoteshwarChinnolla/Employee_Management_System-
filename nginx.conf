http {
    lua_shared_dict jwt_cache 10m;
    lua_package_path "/usr/local/openresty/lualib/?.lua;;";

    upstream employee-service {
        server employee-service:8080;
    }

    upstream admin-service {
        server admin-service:8082;
    }

    upstream auth-service {
        server auth-service:8081;
    }

    server {
        listen 80;
        server_name localhost;

        # No auth for login
        location = /auth/login {
            proxy_pass http://auth-service:8081;
        }

        # Employee routes – pass as-is (e.g. /employees/dashboard → /employees/dashboard)
        location /employees/ {
            access_by_lua_block {
                local jwt = require "resty.jwt"

                local auth_header = ngx.var.http_Authorization
                if not auth_header then
                    ngx.status = 401
                    ngx.say("Missing Authorization header")
                    return ngx.exit(401)
                end

                local _, _, token = string.find(auth_header, "Bearer%s+(.+)")
                if not token then
                    ngx.status = 401
                    ngx.say("Malformed token")
                    return ngx.exit(401)
                end

                local jwt_obj = jwt:verify("JWT_FOR_EMPLOYEE_MANAGEMENT_SYSTEM_!@#$%^&*()", token)
                if not jwt_obj.verified then
                    ngx.status = 401
                    ngx.say("Invalid JWT: " .. jwt_obj.reason)
                    return ngx.exit(401)
                end

                if jwt_obj.payload.role ~= "employee" then
                    ngx.status = 403
                    ngx.say("Forbidden: Only employees allowed")
                    return ngx.exit(403)
                end
            }

            # No rewrite needed: keep full path
            proxy_pass http://employee-service:8080;
        }

        # Admin routes – pass as-is (e.g. /admin/dashboard → /admin/dashboard)
        location /admin/ {
            access_by_lua_block {
                local jwt = require "resty.jwt"

                local auth_header = ngx.var.http_Authorization
                if not auth_header then
                    ngx.status = 401
                    ngx.say("Missing Authorization header")
                    return ngx.exit(401)
                end

                local _, _, token = string.find(auth_header, "Bearer%s+(.+)")
                if not token then
                    ngx.status = 401
                    ngx.say("Malformed token")
                    return ngx.exit(401)
                end

                local jwt_obj = jwt:verify("JWT_FOR_EMPLOYEE_MANAGEMENT_SYSTEM_!@#$%^&*()", token)
                if not jwt_obj.verified then
                    ngx.status = 401
                    ngx.say("Invalid JWT: " .. jwt_obj.reason)
                    return ngx.exit(401)
                end

                if jwt_obj.payload.role ~= "admin" then
                    ngx.status = 403
                    ngx.say("Forbidden: Only admins allowed")
                    return ngx.exit(403)
                end
            }

            proxy_pass http://admin-service:8082;
        }
    }
}
