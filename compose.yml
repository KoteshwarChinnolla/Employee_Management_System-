version: '3.8'

services:
  # db:
  #   image: postgres:17
  #   container_name: emspostgre
  #   restart: always
  #   environment:
  #     POSTGRES_DB: spring
  #     POSTGRES_USER: postgres
  #     POSTGRES_PASSWORD: koti21
  #   volumes:
  #     - ./pgdata:/var/lib/postgresql/data
  #     - ./initdb:/docker-entrypoint-initdb.d
  #   ports:
  #     - "5432:5432"
  #   networks:
  #     - spring_network
  #   healthcheck:
  #     test: ["CMD-SHELL", "pg_isready -U postgres"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5

  employeeapp:
    image: koti21/employee
    container_name: employee
    build:
      context: ./springPostgress
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://ems.c3ykgskuuzr8.ap-south-1.rds.amazonaws.com:5432/postgres
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: ChinnollA21
    networks:
      - spring_network
    # depends_on:
    #   db:
    #     condition: service_healthy

  adminapp:
    image: koti21/admin
    container_name: admin
    build:
      context: ./Admin
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://ems.c3ykgskuuzr8.ap-south-1.rds.amazonaws.com:5432/postgres
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: ChinnollA21
    # depends_on:
    #   db:
    #     condition: service_healthy
    networks:
      - spring_network

  authenticationapp:
    image: koti21/auth
    container_name: Authentication
    build:
      context: ./Authentication
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://ems.c3ykgskuuzr8.ap-south-1.rds.amazonaws.com:5432/postgres
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: ChinnollA21
    # depends_on:
    #   db:
    #     condition: service_healthy
    networks:
      - spring_network

  ticketService:
    image: koti21/ticket
    container_name: ticket
    build:
      context: ./Tickets
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://ems.c3ykgskuuzr8.ap-south-1.rds.amazonaws.com:5432/postgres
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: ChinnollA21
    # depends_on:
    #   db:
    #     condition: service_healthy
    networks:
      - spring_network

  # gateway:
  #   build: .
    
  #   ports:
  #     - "80:80"

  #   depends_on:
  #     - employeeapp
  #     - adminapp
  #     - authenticationapp

  #   networks:
  #     - spring_network


networks:
  spring_network:
    driver: bridge

